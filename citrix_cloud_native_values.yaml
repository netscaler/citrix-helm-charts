cic:
  enabled: False

  imageRegistry: quay.io
  imageRepository: citrix/citrix-k8s-ingress-controller
  imageTag: 1.42.12
  image: "{{ .Values.cic.imageRegistry }}/{{ .Values.cic.imageRepository }}:{{ .Values.cic.imageTag }}"
  pullPolicy: IfNotPresent
  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""
  openshift: false
  adcCredentialSecret: # K8s Secret Name
  # Enable secretStore to implement CSI Secret Provider classes for holding the nslogin credentials
  secretStore: 
    enabled: false
    username: {}
      #valueFrom:
      #  configMapKeyRef:
      #    name: test1
      #    key: username
    password: {}
      #valueFrom:
      #  configMapKeyRef:
      #    name: test1
      #    key: password
  nsIP: x.x.x.x
  nsVIP:
  nsSNIPS:
  license:
    accept: no
  nsPort: 443
  nsProtocol: HTTPS
  nsEnableLabel: true
  nitroReadTimeout:
  logLevel: INFO
  jsonLog: false
  rbacRole: False
  entityPrefix:
  kubernetesURL:
  clusterName:
  ingressClass:
  setAsDefaultIngressClass: False
  serviceClass:
  defaultSSLCertSecret: ""
  defaultSSLSNICertSecret: ""
  podIPsforServiceGroupMembers: False
  ignoreNodeExternalIP: False
  ipam: False
  disableAPIServerCertVerify: False
  logProxy:
  nodeWatch: false
  cncPbr: False
  nodeSelector:
    key:
    value:
  updateIngressStatus: True
  nsHTTP2ServerSide: "OFF"
  nsCookieVersion: "0"
  nsConfigDnsRec:
  nsSvcLbDnsRec:
  nsDnsNameserver:
  optimizeEndpointBinding:
  routeLabels:
  namespaceLabels:
  disableOpenshiftRoutes:
  profileSslFrontend: {}
  # preconfigured: my_ssl_profile
  #  OR
  # config:
  #   tls13: 'ENABLED'
  #   hsts: 'ENABLED'
  profileHttpFrontend: {}
  # preconfigured: my_http_profile
  #  OR
  # config:
  #   dropinvalreqs: 'ENABLED'
  #   websocket: 'ENABLED'
  profileTcpFrontend: {}
  # preconfigured: my_tcp_profile
  #  OR
  # config:
  #   sack: 'ENABLED'
  #   nagle: 'ENABLED'

  exporter:
    required: false
    
    imageRegistry: quay.io
    imageRepository: citrix/citrix-adc-metrics-exporter
    imageTag: 1.4.9
    image: "{{ .Values.cic.exporter.imageRegistry }}/{{ .Values.cic.exporter.imageRepository }}:{{ .Values.cic.exporter.imageTag }}"
    pullPolicy: IfNotPresent
    ports:
      containerPort: 8888
    resources: {}
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi
    extraVolumeMounts: []
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user.
    #- name: github-key
    #  mountPath: /etc/config/keys/
    #  readOnly: true
    #- name: agent-init-scripts
    #  mountPath: /docker-entrypoint.d/
    serviceMonitorExtraLabels: {}

  analyticsConfig:
    required: false
    distributedTracing:
      enable: false
      samplingrate: 100
    endpoint:
      server:
      service:
    timeseries:
      port: 30002
      metrics:
        enable: false
        mode: 'avro'
        exportFrequency: 30
        schemaFile: schema.json
        enableNativeScrape: false
      auditlogs:
        enable: false
      events:
        enable: false
    transactions:
      enable: false
      port: 30001

  nsLbHashAlgo:
    required: false
    hashFingers: 256
    hashAlgorithm: 'DEFAULT'

  serviceAccount:
    create: true

  podAnnotations: {}

  resources:
    requests:
      cpu: 32m
      memory: 128Mi
    # Following values depends on no of ingresses configured by Ingress Controllers, so it is
    # advised to test with maximum no of ingresses to set these values.
    # limits:
    #   cpu: 1000m
    #   memory: 1000Mi
    limits: {}
    # Following values depends on no of ingresses configured by Ingress Controllers, so it is
    # advised to test with maximum no of ingresses to set these values.
    # limits:
    #   cpu: 1000m
    #   memory: 1000Mi

  affinity: {}

  extraVolumeMounts: []
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user.
    #- name: github-key
    #  mountPath: /etc/config/keys/
    #  readOnly: true
    #- name: agent-init-scripts
    #  mountPath: /docker-entrypoint.d/
  
  extraVolumes: []
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user.
    #- name: agent-init-scripts
    #  configMap:
    #     name: agent-init-scripts
    #     defaultMode: 0755
    #- name: github-key
    #  secret:
    #    secretName: github-key
    #    defaultMode: 0744

gslb:
  enabled: False

  imageRegistry: quay.io
  imageRepository: citrix/citrix-k8s-ingress-controller
  imageTag: 1.42.12
  image: "{{ .Values.gslb.imageRegistry }}/{{ .Values.gslb.imageRepository }}:{{ .Values.gslb.imageTag }}"
  pullPolicy: IfNotPresent
  openshift: false
  localRegion:
  localCluster:
  license:
    accept: no
  nsPort: 443
  nsProtocol: HTTPS
  nitroReadTimeout:
  logLevel: INFO
  entityPrefix:
  disableAPIServerCertVerify: False
  kubernetesURL:
  sitedata:
    - siteName: "site1"
      siteIp: "x.x.x.x"
      siteMask:
      sitePublicip:
      secretName: "site1-secret"
      siteRegion: "xxxxxxxxx"
    - siteName: "site2"
      siteIp: "x.x.x.x"
      siteMask:
      sitePublicip:
      secretName: "site2-secret"
      siteRegion: "xxxxxxxxx"

  serviceAccount:
    create: true
  resources:
    requests:
      cpu: 32m
      memory: 128Mi
      # limits:
      #  cpu: 1000m
      #  memory: 1000Mi
    limits: {}

cpx:
  enabled: False

  imageRegistry: quay.io
  imageRepository: citrix/citrix-k8s-cpx-ingress
  imageTag: 14.1-17.101
  image: "{{ .Values.cpx.imageRegistry }}/{{ .Values.cpx.imageRepository }}:{{ .Values.cpx.imageTag }}"
  
  pullPolicy: IfNotPresent
  imagePullSecrets: []
  daemonSet: False
  nameOverride: ""
  fullnameOverride: ""
  replicaCount: 1
  hostName: ""

  mgmtHttpPort: 9080
  mgmtHttpsPort: 9443
  openshift: false
  nsHTTP2ServerSide: "OFF"
  nsCookieVersion: "0"
  nsConfigDnsRec:
  nsSvcLbDnsRec:
  nsDnsNameserver:
  nsEnableLabel: true
  optimizeEndpointBinding:

  routeLabels:
  namespaceLabels:

  cpxBgpRouter: false
  nsIP: 192.168.1.2
  nsGateway: 192.168.1.1

  nsProtocol: http
  ingressIP:
  ipam: False

  cpxLicenseAggregator:
  
  sslCertManagedByAWS: False

  nodeSelector:
    key:
    value:

  serviceType:
    loadBalancer:
      enabled: False
    nodePort:
      enabled: False
      httpPort:
      httpsPort:

  serviceAnnotations: {}

  serviceSpec:
    externalTrafficPolicy: "Cluster"
    loadBalancerIP:
    loadBalancerSourceRanges: []

  servicePorts: []

  cic:
    imageRegistry: quay.io
    imageRepository: citrix/citrix-k8s-ingress-controller
    imageTag: 1.42.12
    image: "{{ .Values.cpx.cic.imageRegistry }}/{{ .Values.cpx.cic.imageRepository }}:{{ .Values.cpx.cic.imageTag }}"
    pullPolicy: IfNotPresent
    required: true
    resources:
    requests:
      cpu: 32m
      memory: 128Mi
    # Following values depends on no of ingresses configured by Ingress Controllers, so it is
    # advised to test with maximum no of ingresses to set these values.
    # limits:
    #   cpu: 1000m
    #   memory: 1000Mi
    limits: {}
    # Following values depends on no of ingresses configured by Ingress Controllers, so it is
    # advised to test with maximum no of ingresses to set these values.
    # limits:
    #   cpu: 1000m
    #   memory: 1000Mi
    rbacRole: False
    prometheusCredentialSecret: # K8s Secret Name for read only user creation for native Prometheus support

  entityPrefix:
  license:
    accept: no
  ingressClass:
  setAsDefaultIngressClass: False
  nitroReadTimeout:
  logLevel: INFO
  jsonLog: false
  defaultSSLCertSecret: ""
  defaultSSLSNICertSecret: ""
  updateIngressStatus: False
  disableAPIServerCertVerify: False
  logProxy:
  kubernetesURL:
  disableOpenshiftRoutes:

  ADMSettings:
    licenseServerIP:
    licenseServerPort: 27000
    ADMIP:
    loginSecret:
    bandWidthLicense: false
    bandWidth: 1000
    vCPULicense: false
    cpxCores:
    platform: false
    licenseEdition: PLATINUM
  
  exporter:
    required: false
    imageRegistry: quay.io
    imageRepository: citrix/citrix-adc-metrics-exporter
    imageTag: 1.4.9
    image: "{{ .Values.cpx.exporter.imageRegistry }}/{{ .Values.cpx.exporter.imageRepository }}:{{ .Values.cpx.exporter.imageTag }}"
    pullPolicy: IfNotPresent
    ports:
      containerPort: 8888
    resources: {}
    serviceMonitorExtraLabels: {}

  analyticsConfig:
    required: false
    distributedTracing:
      enable: false
      samplingrate: 100
    endpoint:
      server:
      service:
    timeseries:
      port: 5563
      metrics:
        enable: false
        mode: 'avro'
        exportFrequency: 30
        schemaFile: schema.json
        enableNativeScrape: false
      auditlogs:
        enable: false
      events:
        enable: false
    transactions:
      enable: false
      port: 5557

  bgpSettings:
    required: false
    bgpConfig:
    - bgpRouter:
        localAS: 100
        neighbor:
        - address:
          remoteAS: 100
          advertisementInterval: 10
          ASOriginationInterval: 10
          
  bgpPort: 

  nsLbHashAlgo:
    required: false
    hashFingers: 256
    hashAlgorithm: 'DEFAULT'

  serviceAccount:
    create: true

  podAnnotations: {}

  # This is the resource for CPX container.
  resources:
    requests:
      cpu: 128m
      memory: 500Mi
    limits: {}
    # limits:
    #   cpu: 500m
    #   memory: 512Mi
  affinity: {}
  
  # cpxCommands: to provide global config to be applied in CPX. The commands will be executed in order. For e.g.
  # add rewrite action rw_act_x_forwarded_proto insert_http_header X-Forwarded-Proto "\"https\""
  # add rewrite policy rw_pol_x_forwarded_proto CLIENT.SSL.IS_SSL rw_act_x_forwarded_proto
  # bind rewrite global rw_pol_x_forwarded_proto 10 -type REQ_OVERRIDE
  cpxCommands: |
    

  # cpxShellCommands: to provide commands that need to be executed in shell of CPX. For e.g.
  # touch /etc/a.txt
  # echo "this is a" > /etc/a.txt
  # echo "this is the file" >> /etc/a.txt
  # ls >> /etc/a.txt
  cpxShellCommands: |

iaIngress:
  enabled: False

  citrixCPX: false

  coe:
    coeURL:
    coeTracing: false

  metricExporter:
    required: true
    imageRegistry: quay.io
    imageRepository: citrix/citrix-adc-metrics-exporter
    imageTag: 1.4.9
    image: "{{ .Values.iaIngress.metricExporter.imageRegistry }}/{{ .Values.iaIngress.metricExporter.imageRepository }}:{{ .Values.iaIngress.metricExporter.imageTag }}"
    port: 8888
    secure: "YES"
    logLevel: ERROR
    imagePullPolicy: IfNotPresent

  xDSAdaptor:
    imageRegistry: quay.io
    imageRepository: citrix/citrix-xds-adaptor
    imageTag: 0.10.3
    image: "{{ .Values.iaIngress.xDSAdaptor.imageRegistry }}/{{ .Values.iaIngress.xDSAdaptor.imageRepository }}:{{ .Values.iaIngress.xDSAdaptor.imageTag }}"
    imagePullPolicy: IfNotPresent
    proxyType: router
    secureConnect: true
    logLevel: DEBUG
    jsonLog: false
    defaultSSLListenerOn443: true

  istioPilot:
    name: istiod
    namespace: istio-system
    secureGrpcPort: 15012
    insecureGrpcPort: 15010
    SAN:

  certProvider:
    caAddr: istiod.istio-system.svc
    caPort: 15012
    trustDomain: cluster.local
    certTTLinHours: 720
    clusterId: Kubernetes
    jwtPolicy: #specify third-party-jwt if Kubernetes cluster supports third-party tokens


  ingressGateway:
    netscalerUrl: null
    imageRegistry: quay.io
    imageRepository: citrix/citrix-k8s-cpx-ingress
    imageTag: 13.1-30.52
    image: "{{ .Values.iaIngress.ingressGateway.imageRegistry }}/{{ .Values.iaIngress.ingressGateway.imageRepository }}:{{ .Values.iaIngress.ingressGateway.imageTag }}"
    imagePullPolicy: IfNotPresent
    EULA: NO
    mgmtHttpPort: 10080
    mgmtHttpsPort: 10443
    httpNodePort: 30180
    httpsNodePort: 31443
    nodePortRequired: false
    lightWeightCPX: 1
    secretVolumes:
    #licenseServerIP: this value will be taken from ADMSettings.ADMIP
    label: citrix-ingressgateway
    tcpPort:
    vserverIP: nsip
    adcServerName:
    netProfile:
    multiClusterIngress: false
    multiClusterListenerPort: 15443
    multiClusterListenerNodePort: 32443
    multiClusterSvcDomain: global
    cpxLicenseAggregator:
    enableLabelsFeature: FALSE


  ADMSettings:
    ADMIP:
    licenseServerIP:
    licenseServerPort: 27000
    bandWidthLicense: false
    bandWidth: 1000
    vCPULicense: false
    cpxCores:
    analyticsServerPort: 5557
    licenseEdition: PLATINUM

  secretName: nslogin

iaEgress:
  enabled: False

  citrixCPX: false

  coe:
      coeURL:
      coeTracing: false

  metricExporter:
    required: true
    imageRegistry: quay.io
    imageRepository: citrix/citrix-adc-metrics-exporter
    imageTag: 1.4.9
    image: "{{ .Values.iaEgress.metricExporter.imageRegistry }}/{{ .Values.iaEgress.metricExporter.imageRepository }}:{{ .Values.iaEgress.metricExporter.imageTag }}"
    port: 8888
    secure: "FALSE"
    logLevel: ERROR
    imagePullPolicy: IfNotPresent

  istioPilot:
    name: istiod
    namespace: istio-system
    secureGrpcPort: 15012
    insecureGrpcPort: 15010
    SAN: ""

  certProvider:
    caAddr: istiod.istio-system.svc
    caPort: 15012
    trustDomain: cluster.local
    certTTLinHours: 720
    clusterId: Kubernetes
    jwtPolicy: #specify third-party-jwt if Kubernetes cluster supports third-party tokens

  xDSAdaptor:
    imageRegistry: quay.io
    imageRepository: citrix/citrix-xds-adaptor
    imageTag: 0.10.3
    image: "{{ .Values.iaEgress.xDSAdaptor.imageRegistry }}/{{ .Values.iaEgress.xDSAdaptor.imageRepository }}:{{ .Values.iaEgress.xDSAdaptor.imageTag }}"
    imagePullPolicy: IfNotPresent
    proxyType: router
    secureConnect: true
    logLevel: DEBUG
    jsonLog: false
    defaultSSLListenerOn443: true


  egressGateway:
    netscalerUrl: null
    imageRegistry: quay.io
    imageRepository: citrix/citrix-k8s-cpx-ingress
    imageTag: 13.1-30.52
    image: "{{ .Values.iaEgress.egressGateway.imageRegistry }}/{{ .Values.iaEgress.egressGateway.imageRepository }}:{{ .Values.iaEgress.egressGateway.imageTag }}"
    imagePullPolicy: IfNotPresent
    EULA: false
    mgmtHttpPort: 10080
    mgmtHttpsPort: 10443
    lightWeightCPX: 1
    label: citrix-egressgateway
    vserverIP: nsip
    adcServerName:
    netProfile:
    cpxLicenseAggregator:
    enableLabelsFeature: FALSE

  ADMSettings:
    ADMIP:
    licenseServerIP:
    licenseServerPort: 27000
    bandWidthLicense: false
    bandWidth: 1000
    vCPULicense: false
    cpxCores:
    analyticsServerPort: 5557
    licenseEdition: PLATINUM

  secretName: nsloginegress


iaSidecar:
  enabled: False

  xDSAdaptor:
    imageRegistry: quay.io
    imageRepository: citrix/citrix-xds-adaptor
    imageTag: 0.10.3
    image: "{{ .Values.iaSidecar.xDSAdaptor.imageRegistry }}/{{ .Values.iaSidecar.xDSAdaptor.imageRepository }}:{{ .Values.iaSidecar.xDSAdaptor.imageTag }}"
    imagePullPolicy: IfNotPresent
    proxyType: sidecar
    secureConnect: true
    logLevel: DEBUG
    jsonLog: false
    defaultSSLListenerOn443: true

  coe:
    coeURL:
    coeTracing: false

  istioPilot:
    name: istiod
    namespace: istio-system
    secureGrpcPort: 15012
    insecureGrpcPort: 15010
    SAN: #"spiffe://cluster.local/ns/istio-system/sa/istiod-service-account"

  certProvider:
    caAddr: istiod.istio-system.svc
    caPort: 15012
    trustDomain: cluster.local
    certTTLinHours: 720
    clusterId: Kubernetes
    jwtPolicy: #specify third-party-jwt if Kubernetes cluster supports third-party tokens

  cpxProxy:
    netscalerUrl: "http://127.0.0.1"
    imageRegistry: quay.io
    imageRepository: citrix/citrix-k8s-cpx-ingress
    imageTag: 14.1-17.101
    image: "{{ .Values.iaSidecar.cpxProxy.imageRegistry }}/{{ .Values.iaSidecar.cpxProxy.imageRepository }}:{{ .Values.iaSidecar.cpxProxy.imageTag }}"
    imagePullPolicy: IfNotPresent
    EULA: NO
    cpxSidecarMode: YES
    mgmtHttpPort: 10080
    mgmtHttpsPort: 10443
    cpxDisableProbe: "YES"
    cpxLicenseAggregator:
    enableLabelsFeature: FALSE
    #licenseServerIP: this value is taken from ADMSettings.ADMIP

  ADMSettings:
    ADMIP:
    licenseServerIP:
    licenseServerPort: 27000
    bandWidthLicense: false
    bandWidth: 1000
    analyticsServerPort: 5557
    licenseEdition: PLATINUM

  sidecarWebHook:
    webhookImageRegistry: quay.io
    webhookImageRepository: citrix/cpx-istio-sidecar-injector
    webhookImageTag: 1.3.0
    webhookImage: "{{ .Values.iaSidecar.sidecarWebHook.webhookImageRegistry }}/{{ .Values.iaSidecar.sidecarWebHook.webhookImageRepository }}:{{ .Values.iaSidecar.sidecarWebHook.webhookImageTag }}"
    imagePullPolicy: IfNotPresent

  sidecarCertsGenerator:
    imageRegistry: quay.io
    imageRepository: citrix/cpx-sidecar-injector-certgen
    imageTag: 1.2.0
    image: "{{ .Values.iaSidecar.sidecarCertsGenerator.imageRegistry }}/{{ .Values.iaSidecar.sidecarCertsGenerator.imageRepository }}:{{ .Values.iaSidecar.sidecarCertsGenerator.imageTag }}"
    imagePullPolicy: IfNotPresent

  webhook:
    injectionLabelName: cpx-injection

cnc:
  enabled: False
  imageRegistry: quay.io
  imageRepository: citrix/citrix-k8s-node-controller
  imageTag: 2.2.12
  image: "{{ .Values.cnc.imageRegistry }}/{{ .Values.cnc.imageRepository }}:{{ .Values.cnc.imageTag }}"
  nameOverride: ""
  fullnameOverride: ""
  pullPolicy: IfNotPresent
  license:
    accept: no
  nsIP:
  adcCredentialSecret:
  network:
  vtepIP:
  vxlan:
    id:
    port:
  cniType:
  dsrIPRange:
  clusterName:
  cncConfigMap:
    name:
    tolerationsInJson:
  deploymentTolerations:
    - key:
      effect:
      operator:
  cncRouterImage:
  cncRouterName:

  serviceAccount:
    create: true

coe:
  enabled: False
  imageRegistry: quay.io
  imageRepository: citrix/citrix-observability-exporter
  imageTag: 1.9.001
  image: "{{ .Values.coe.imageRegistry }}/{{ .Values.coe.imageRepository }}:{{ .Values.coe.imageTag }}"
  pullPolicy: IfNotPresent
  fullnameOverride: ""
  nameOverride: ""
  replicas: 1
  license:
    accept: no
  nodePortRequired: false
  headless: false
  transaction:
    nodePort:
  ns_tracing:
    enabled: false
    server: "zipkin:9411/api/v1/spans"
  splunk:
    enabled: false
    server:
    authtoken:
    indexprefix:
  elasticsearch:
    enabled: false
    server:
    indexprefix:
  kafka:
    enabled: false
    broker:
    topic:
    dataFormat: "AVRO"
    events: "no"
    auditlogs: "no"
  timeseries:
    enabled: false
    nodePort:
  json_trans_rate_limiting:
    enabled: false
    limit: 100
    queuelimit: 1000
    window: 5
  podAnnotations: {}
  resources: {}
  tolerations: []
  affinity: {}
  nsoeLogLevel: "INFO"

ipam:
  enabled: False
  imageRegistry: quay.io
  imageRepository: citrix/citrix-ipam-controller
  imageTag: 1.2.0
  image: "{{ .Values.ipam.imageRegistry }}/{{ .Values.ipam.imageRepository }}:{{ .Values.ipam.imageTag }}"
  
  pullPolicy: IfNotPresent

  vipRange:

ao:
  imageRegistry: quay.io
  imageRepository: citrix/adm-agent-onboarding
  imageTag: 1.1.0
  image: "{{ .Values.ao.imageRegistry }}/{{ .Values.ao.imageRepository }}:{{ .Values.ao.imageTag }}"
  pullPolicy: IfNotPresent
  token:
  cloudUrl: https://adm.cloud.com
  apiURL:
  clusterName:

  admAgent:
    name: admagent
    imageRegistry: quay.io
    imageRepository: citrix/adm-agent
    imageTag: latest
    image: "{{ .Values.ao.admAgent.imageRegistry }}/{{ .Values.ao.admAgent.imageRepository }}:{{ .Values.ao.admAgent.imageTag }}"
    helperImageRegistry: quay.io
    helperImageRepository: citrix/adm-agent-helper
    helperImageTag: 1.0.0
    helperImage: "{{ .Values.ao.admAgent.helperImageRegistry }}/{{ .Values.ao.admAgent.helperImageRepository }}:{{ .Values.ao.admAgent.helperImageTag }}"
    loginSecret:

  adc:
    IP:
    mgmtHTTPPort: 80
    mgmtHTTPSPort: 443
    loginSecret: nslogin

cla:
  enabled: False

  licenseAggregator:
    imageRegistry: quay.io
    imageRepository: citrix/cpx-license-aggregator
    imageTag: 1.1.0
    image: "{{ .Values.cla.licenseAggregator.imageRegistry }}/{{ .Values.cla.licenseAggregator.imageRepository }}:{{ .Values.cla.licenseAggregator.imageTag }}"
    pullPolicy: IfNotPresent
    service:
      type: NodePort
      nodePort:
    username:
    securityContext: {}
    resources: {}
    loglevel: INFO
    jsonlog: FALSE

  nslped:
    imageRegistry: quay.io
    imageRepository: citrix/nslped
    imageTag: 1.0.0
    image: "{{ .Values.cla.nslped.imageRegistry }}/{{ .Values.cla.nslped.imageRepository }}:{{ .Values.cla.nslped.imageTag }}"
    pullPolicy: IfNotPresent
    securityContext: {}
    resources: {}

  redis:
    image: redis:7.0.4
    pullPolicy: IfNotPresent
    secretName:
    securityContext: {}
    resources: {}

  sidecarCertsGenerator:
    imageRegistry: quay.io
    imageRepository: citrix/cpx-sidecar-injector-certgen
    imageTag: 1.2.0
    image: "{{ .Values.cla.sidecarCertsGenerator.imageRegistry }}/{{ .Values.cla.sidecarCertsGenerator.imageRepository }}:{{ .Values.cla.sidecarCertsGenerator.imageTag }}"
    pullPolicy: IfNotPresent

  serviceAccount:
    annotations: {}

  licenseServer:
    address:
    port: 27000

  licenseInfo:
    instanceQuantum: 0
    bandwidthPlatinumQuantum: 0
    bandwidthEnterpriseQuantum: 0
    bandwidthStandardQuantum: 0
    vcpuPlatinumQuantum: 0
    vcpuEnterpriseQuantum: 0
    vcpuStandardQuantum: 0
    instanceLowWatermark: 0
    bandwidthPlatinumLowWatermark: 0
    bandwidthEnterpriseLowWatermark: 0
    bandwidthStandardLowWatermark: 0
    vcpuPlatinumLowWatermark: 0
    vcpuStandardLowWatermark: 0
    vcpuEnterpriseLowWatermark: 0
    dbExpireTime: 172800

  adcInfo:
    selectorLabel:
      key: adc
      value: citrix

  podAnnotations: {}
  podSecurityContext: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  imagePullSecrets: []
